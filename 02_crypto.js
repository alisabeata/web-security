// crypto

// шифрование лучший инструмент для защиты от хакеров и слежки

// список криптопродуктов
// https://www.schneier.com/academic/paperfiles/worldwide-survey-of-encryption-products.pdf

// debian os - на теущий момент максимально детерминирована / обеспеч наибольшую безопасность

// https пример аконичного/абонентского шифрования
// есть два основных компонента шифрования - алгоритм (public) и ключ (private)
// AES - симметричный алгоритм / исп всего один ключ (пароль конвертируется в ключ)
// чем выше битрейт шифрования тем выше защита, но тем дольше процесс шифровки/дешифровки
// битрейт в 256 даёт примерное кол-во комбинаций 1.1 * 10^7
// чем длиннее пароль тем выше степень защиты
// брутфорсинг техника перебоар комбинаций
// для перебора применяются словари с паролями
// если ключа нет в словаре, то взлом не будет осуществлён


// symmetric encription algorithms
// - Data Encription Standart (DES)
// - Triple-DES (3DES)
// - Blowfish
// - RC4
// - RC5
// - RC6
// - Advanced Encryption Standard (AES) - общепринятый стандарт симметр шифрования

// (!) AES256 макс защищён, избегать RC4 и DES
// на текущий момент нет технологии для взлома AES шифрования, при условии введения сильного пароля



// asymmetric encription
// исп два ключа, открытый и закрытый
// - Rivest-Shamir-Adleman (RSA) - наиболее популярный, основан на сложности факторизации или разложения больших чисел на произведение простых множителей
// - Elliptic curve cryptosystem (ECC) - алг на основе элептичесеких кривых, стойкость алгоритма опирается на задачу вычисления дискретных логарифмов на элиптических кривых https://ru.wikipedia.org/wiki/Дискретное_логарифмирование_на_эллиптической_кривой
// - Diffie-Hellman (DH) - стойкость основана на дискретном логарифмировании в конечном поле
// - El Gamal - так же осн на дискретном логарифмировании в конечном поле

// ассиметр алгоримы позв создавать электронные подписи
// тем самым позволяет отправлять ключ в зашифрованном виде без возможности перехвата
// оба ключа математически связаны, генерируются в одноо и тоже время



// hash-функции, цифровые подписи помогают обеспечивать аутентификацию/лигитимность отправителей-получателей
// результат выполнения хеш-функции назв хэш-сумма
// хэш нельзя переконвертировать обратно во входные данные
// хэш позволяет определить целостность файла/объекта, те то что он не был изменён
// для шифрования рекомендуется исп SHA-256 и выше (384, 512)


// цифровая подпись это значение хэша, которое зашифровано закрытым ключем отправителя
// с тех точки зрения это отметка подтвержающее отправителя
// обеспечивает невозможность отказа от авторства


// SSl и TLS
// криптографич протоколы
// SSl более старый и менее безопаный
// примером исп TLS является протокол HTTPS
// так же TLS может исп для любого соединения ftp и пр
// TLS обеспеч приватность
// ключи для шифрования генерируются уникальным образом для каждого соединения
// атакующий не может модифицированть коммуникацию между клиентом-сервером при этом оставаться незамеченым

// SSL striping (man in the middle) - перехват соединения, атакующий выступает в роли прокси (на выходе отличие только в отсуствии https в адресной строке)
// возможны атаки через одну локальную сеть / сеть вай-фай, перехват так же работает методом проксирования (ARP Spoofing), атакующий отправляет ARP пакеты имитирую шлюз атакуемого
// чтобы защититься от снятия ssl трафика нужно исп тунелирование соединения (VPN/SSH, end to end шифрование)
// инстр для мониторинга арп-спуфинга - Arpwatch, Sniffdet
